unit PDFViewUnit;

interface

uses
	{$IFDEF MSWINDOWS} Winapi.ShellAPI, Winapi.Windows, {$ENDIF MSWINDOWS}
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs,
  Winsoft.FireMonkey.PDFium, FMX.Layouts, FMX.ListBox, FMX.Controls.Presentation, FMX.StdCtrls,
  FMX.Objects, System.ImageList, FMX.ImgList, System.IOUtils, FMX.Edit, FMX.EditBox, FMX.NumberBox,
  FMX.TreeView, System.Generics.Collections, System.Math, FMX.Ani;

type
  TPDFViewForm = class(TForm)
    FPdf: TFPdf;
    FPdfView: TFPdfView;
    ComboBoxZoom: TComboBox;
    HeaderPanel: TPanel;
    PackBackButton: TSpeedButton;
    ImageList: TImageList;
    PageFwdButton: TSpeedButton;
    PageLabel: TLabel;
    TreeView: TTreeView;
    eventHostItem: TTreeViewItem;
    BookmarkLabel: TLabel;
    BookmarkClose: TSpeedButton;
    BookmarkPanel: TPanel;
    BookmarkButton: TSpeedButton;
    SeperatorLine: TLine;
    PageLine: TLine;
    PageEdit: TEdit;
    SearchEdit: TEdit;
    SearchLine: TLine;
    SearchButton: TSpeedButton;
    SearchPanel: TRectangle;
    FullSearchLine: TLine;
    FullSearchEdit: TEdit;
    MatchCaseButton: TButton;
    ScrollBox: TVertScrollBox;
    WholeWordButton: TButton;
    FullSearchLabel: TLabel;
    FullSearchClose: TSpeedButton;
    FullSearchPreviousButton: TButton;
    FullSearchNextButton: TButton;
    FullSearchStartButton: TButton;
    procedure FPdfViewMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X,
      Y: Single);
    procedure FPdfViewMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Single);
    procedure FPdfViewMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X,
      Y: Single);
    procedure FormResize(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FPdfViewPaint(Sender: TObject; Canvas: TCanvas);
    procedure ComboBoxZoomChange(Sender: TObject);
    procedure ScrollBoxMouseWheel(Sender: TObject; Shift: TShiftState; WheelDelta: Integer;
      var Handled: Boolean);
    procedure FPdfViewPageChange(Sender: TObject);
    procedure ImageFirstPageClick(Sender: TObject);
    procedure ImageLastPageClick(Sender: TObject);
    procedure ImageNextPageClick(Sender: TObject);
    procedure ImagePreviousPageClick(Sender: TObject);
    procedure eventHostItemClick(Sender: TObject);
    procedure PageEditChange(Sender: TObject);
    procedure BookmarkButtonClick(Sender: TObject);
    procedure FloatAnimationCloseFinish(Sender: TObject);
    procedure SearchEditChangeTracking(Sender: TObject);
    procedure SearchEditKeyUp(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure SearchButtonClick(Sender: TObject);
    procedure FullSearchCloseClick(Sender: TObject);
    procedure FullSearchStartButtonClick(Sender: TObject);
    procedure FullSearchNextButtonClick(Sender: TObject);
    procedure FullSearchPreviousButtonClick(Sender: TObject);
  private
    { Private-Deklarationen }
    Selecting				: Boolean;
    SelectionStart	: Integer;
    SelectionEnd		: Integer;
    PixelsPerInch		: Double;
    WheelStackDelta	: Integer;
    SearchStart			: Integer;
    SearchEnd				: Integer;
    SearchLocation  : Integer;
    SearchRunning		: Boolean;
    SearchMatchPair : TPair<String, Integer>;
    procedure Zoom;
    procedure log(const text: string);
    function searchPDFContents(searchText : String): Integer;
    procedure searchDocument(searchText : string; directionInvert : boolean);
    procedure addChildBookmarks(BookmarkNode: TTreeViewItem; const Bookmark: TBookmark; recursiveLayer : Integer);
  public
    { Public-Deklarationen }
    procedure loadNewPdf(const pathToPdf : string);
  end;

var
  PDFViewForm: TPDFViewForm;

implementation

{$R *.fmx}

uses logUnit, FMX.Platform, FMX.BehaviorManager, FileView;

//HELPERS
procedure TPDFViewForm.log(const text: string);
begin
  LogForm.log(text);
end;


procedure TPDFViewForm.PageEditChange(Sender: TObject);
var
page	:	Integer;
begin
  if (TEdit(Sender).Text = '') then
  begin
  	page := 1;
  end else
  begin
  	page := StrToInt(TEdit(Sender).Text);
  end;

  if (page > FPdfView.PageCount) then
  begin
    page := FPdfView.PageCount;
  end else if (page <= 0) then
  begin
    page := 1;
  end;
  FPdfView.PageNumber := page;
  TEdit(Sender).SelStart := 999;
end;


function calcHeight(width : Single; text : String): Single;
var
  x, y : Single;
  map : TBitmap;
begin
  Result := 20;
  map := TBitmap.Create;
  try
  	x := map.Canvas.TextWidth(text) + 15;
    y := 20 * Ceil(x / width);
    if (x > width) and (y > 20) then
    begin
      Result := trunc(y * 1.15);
    end;
  finally
    map.Free;
  end;
end;

procedure TPDFViewForm.loadNewPdf(const pathToPdf : string);
var
  Bookmarks : TBookmarks;
begin
  Bookmarks := nil;
	Selecting := False;
  SelectionStart := -1;
  SelectionEnd := -1;

  SearchMatchPair := TPair<String, Integer>.Create('', -1);
  FPdfView.Enabled := false;
  FPdf.Active := false;

  var PdfContent: TArray<Byte>; // PDF content
	PdfContent := TFile.ReadAllBytes(pathToPdf); // read PDF content from file to memory
	FPdf.LoadDocument(PdfContent, Length(PdfContent), true); // load PDF from memory data

  FPdf.PageNumber := 0;
  FPdfView.PageNumber := 1;

  Bookmarks := FPdf.Bookmarks;
  var
    Node : TTreeViewItem;
  var
    i    : Integer;
  TreeView.BeginUpdate;
  try
  	TreeView.Clear;
    for I := 0 to Length(Bookmarks) - 1 do
    begin
    	Node := TTreeViewItem.Create(TreeView);
      Node.Text := Bookmarks[I].Title;
      Node.WordWrap := true;
      Node.Tag := Bookmarks[I].PageNumber;
      TreeView.AddObject(Node);
      Node.OnClick := PDFViewForm.eventHostItemClick;
      Node.Height := calcHeight(TreeView.Width - 33, Node.Text);  //- 11 (Popopen Scrollbar Offset), -22 (Left Side Spacing Offset)
      addChildBookmarks(Node, Bookmarks[I], 1);
    end;

     if TreeView.Count > 0 then
     begin
       TreeView.Visible := True;
     end;
  finally
     TreeView.EndUpdate;
  end;

  FPdfView.Active := True;
  FPdfView.Enabled := True;

  PageLabel.Text := 'of ' + IntToStr(FPdfView.PageCount);
	Zoom;
  FPdfView.Repaint;

end;

procedure TPDFViewForm.addChildBookmarks(BookmarkNode: TTreeViewItem; const Bookmark: TBookmark; recursiveLayer : Integer);
var
  Bookmarks: TBookmarks;
  I: Integer;
  Node: TTreeViewItem;
begin
  Bookmarks := FPdf.BookmarkChildren[Bookmark];
  for I := 0 to Length(Bookmarks) - 1 do
  begin
    Node := TTreeViewItem.Create(BookmarkNode);
    Node.Text := Bookmarks[I].Title;
    Node.WordWrap := true;
    Node.Tag := Bookmarks[I].PageNumber;
    BookmarkNode.AddObject(Node);
    AddChildBookmarks(Node, Bookmarks[I], recursiveLayer + 1);
    Node.Height := calcHeight(TreeView.Width - (20 * recursiveLayer) - 33, Node.Text);
    Node.OnClick := PDFViewForm.eventHostItemClick;
  end;
end;

procedure TPDFViewForm.Zoom;
var
  PdfPageWidth, PdfPageHeight: Double;
  Zoom: Double;
begin
  if FPdfView.Active then
  begin
    if FPdfView.Rotation in [ro0, ro180] then
    begin
      PdfPageWidth := FPdfView.PageWidth;
      PdfPageHeight := FPdfView.PageHeight;
    end
    else
    begin
      PdfPageWidth := FPdfView.PageHeight;
      PdfPageHeight := FPdfView.PageWidth;
    end;

    case ComboBoxZoom.ItemIndex of
      0: Zoom := 0.1;
      1: Zoom := 0.25;
      2: Zoom := 0.5;
      3: Zoom := 0.75;
      5: Zoom := 1.25;
      6: Zoom := 1.5;
      7: Zoom := 2.0;
      8: Zoom := 4.0;
      10: // Zoom to page
          if ScrollBox.Width / PdfPageWidth > ScrollBox.Height / PdfPageHeight then
            Zoom := ScrollBox.Height / PointsToPixels(PdfPageHeight, PixelsPerInch) // zoom to height
          else
            Zoom := ScrollBox.Width / PointsToPixels(PdfPageWidth, PixelsPerInch); // zoom to width

      11: Zoom := (ScrollBox.Width - 24) / PointsToPixels(PdfPageWidth, PixelsPerInch); // page width
      else Zoom := 1.0;
    end;

    // set size
    FPdfView.Size.Size := TSizeF.Create(
      PointsToPixels(Zoom * PdfPageWidth, PixelsPerInch),
      PointsToPixels(Zoom * PdfPageHeight, PixelsPerInch));
  end;
end;

procedure OSExecute(const ACommand: string);
begin
{$IFDEF MSWINDOWS}
  ShellExecute(0, 'OPEN', PChar(ACommand), '', '', SW_SHOWNORMAL);
{$ENDIF MSWINDOWS}
end;

function IsAlphaNumeric(C: Char): Boolean;
begin
  Result := CharInSet(C, ['a'..'z', 'A'..'Z', '0'..'9']);
end;

function TPDFViewForm.searchPDFContents(searchText : String): Integer;
const
  NewLine = #13#10;
var
  i							 : Integer;
  FileName, line : string;
begin
	Result := 0;
  FPdF.PageNumber := 0;
  for i := 1 to FPdF.PageCount do
  begin
  	FPdF.PageNumber := i;
    for line in FPdF.Text.Split([NewLine]) do
    begin
    	if (line <> '') and (line.Contains(searchText)) then
    	begin
   		 Result := Result + 1;
    	end;
    end;
    Application.ProcessMessages;
  end;
end;

procedure TPDFViewForm.searchDocument(searchText : string; directionInvert : boolean);
var
	FoundIndex: Integer;
	Cancel  : Boolean;
begin
	Cancel := false;
  if (searchText <> '') and (not SearchRunning) then
  begin
    log('started new search for: ' + searchText + 'with SR: ' + SearchRunning.ToString());
  	SearchRunning := true;
    if (SearchMatchPair.Key <> searchText) then
    begin
    	SearchMatchPair.Create(searchText,searchPDFContents(searchText));
      SearchLocation := 0;
    end;

    if (SearchMatchPair.Value > 0) then
    begin
			try
				FPdf.PageNumber := FPdfView.PageNumber;
				if SearchStart = -1 then
				begin
					FoundIndex := FPdf.FindFirst(searchText, []);
				end
				else if (directionInvert) then
				begin
					FoundIndex := FPdf.FindPrevious();
				end
				else
				begin
					FoundIndex := FPdf.FindNext();
				end;

				SearchStart := -1;
				SearchEnd := -1;

				log('Current search index: ' + IntToStr(FoundIndex));
				while (FoundIndex = -1) do
				begin
					Application.ProcessMessages;
					if Cancel then
						Break;

					if (directionInvert) then
					begin
						if (FPdf.PageNumber - 1 > 1) then
							FPdf.PageNumber := FPdf.PageNumber - 1
						else
						begin
							FPdf.PageNumber := FPdf.PageCount;
							SearchLocation := SearchLocation;
						end;
					end
					else
					begin
						if (FPdf.PageCount > FPdf.PageNumber) then
							FPdf.PageNumber := FPdf.PageNumber + 1
						else
							FPdf.PageNumber := 1;
					end;

          //TODO: I have no idea how to start search at end of page (need full search logic (fpdf code))
					FoundIndex := FPdf.FindFirst(searchText, []);
				end;

				if FoundIndex <> -1 then
				begin
					if (directionInvert) then
						SearchLocation := SearchLocation - 1
					else
						SearchLocation := SearchLocation + 1;

					FPdfView.PageNumber := FPdf.PageNumber;
					SearchStart := FoundIndex;
					SearchEnd := FoundIndex + Length(searchText) - 1;
          FullSearchLabel.Text := SearchLocation.ToString + ' von '+ SearchMatchPair.Value.ToString;
					FPdfView.Repaint;
				end
				else
				begin
					FPdfView.Repaint;
					if (not(Cancel)) or (SearchMatchPair.Value = 0) then // Uselessly Redundant
						FullSearchLabel.text := 'Keine Ergebnisse';
				end;
			finally
				SearchRunning := False;
			end;
    end else
    begin
      FullSearchLabel.text := 'Keine Ergebnisse';
    end;
  end
end;

procedure TPDFViewForm.ScrollBoxMouseWheel(Sender: TObject; Shift: TShiftState; WheelDelta: Integer;
  var Handled: Boolean);
  var
  maxPages, currPage, tolerance:  Integer;
begin
  tolerance := trunc((Screen.Height/abs(WheelDelta)) * 37.5);
	if (WheelStackDelta + WheelDelta < WheelStackDelta) and (WheelDelta > 0)
  or (WheelStackDelta + WheelDelta > WheelStackDelta) and (WheelDelta < 0) then
  begin
    WheelStackDelta := 0;
    exit;
  end else
  begin
  	WheelStackDelta := WheelStackDelta + WheelDelta;
  end;
  maxPages := FPdfView.PageCount;
  currPage := FPdfView.PageNumber;
  if (WheelStackDelta < -tolerance) and (currPage < maxPages) then
  begin
    FPdfView.PageNumber := FPdfView.PageNumber + 1;
    WheelStackDelta := 0;
    ScrollBox.ScrollBy(MaxInt, MaxInt);
  end else if (WheelStackDelta > tolerance) and (currPage > 1) then
  begin
    FPdfView.PageNumber := currPage - 1;
    WheelStackDelta := 0;
    //ScrollBox.ScrollBy(0,-100);
  end;
  WheelDelta := 0;
end;

procedure TPDFViewForm.SearchButtonClick(Sender: TObject);
begin
	if (not SearchPanel.Visible = true) then
  begin
  	FullSearchEdit.Text := SearchEdit.Text;
    SearchEdit.Visible := false;
  	SearchPanel.Visible := true;
    FPdfView.Margins.Top := SearchPanel.Height;
    FPdfView.Repaint;
    searchDocument(FullSearchEdit.Text, true);
  end else
  begin
    FullSearchCloseClick(PDFViewForm);
    SearchMatchPair.Create('',-1);
    FPdf.ReloadPage;
    FPdfView.Repaint;
  end;
end;

procedure TPDFViewForm.SearchEditChangeTracking(Sender: TObject);
begin
if SearchStart <> -1 then
  begin
    SearchStart := -1;
    SearchEnd := -1;
    FPdfView.Repaint;
  end;
end;

procedure TPDFViewForm.SearchEditKeyUp(Sender: TObject; var Key: Word; var KeyChar: Char;
  Shift: TShiftState);
begin
if Key = 13 then
  begin
    SearchButtonClick(PDFViewForm);
  end;
end;

procedure TPDFViewForm.BookmarkButtonClick(Sender: TObject);
begin
  if (BookmarkPanel.Visible) then
  begin
    BookmarkPanel.Visible := false;
  end else
  begin
    BookmarkPanel.Visible := true;
  end;
  Zoom;
end;

procedure TPDFViewForm.ComboBoxZoomChange(Sender: TObject);
begin
  Zoom;
end;

procedure TPDFViewForm.eventHostItemClick(Sender: TObject);
begin
	if TTreeViewItem(Sender).IsExpanded = true then
    begin
       TTreeViewItem(Sender).Collapse;
       TTreeViewItem(Sender).IsExpanded := false;
  	end else
  	begin
  		TTreeViewItem(Sender).Expand;
      TTreeViewItem(Sender).IsExpanded := true;
  	end;
  FPdfView.PageNumber := TTreeViewItem(Sender).Tag;
end;

procedure TPDFViewForm.FloatAnimationCloseFinish(Sender: TObject);
begin
	if (BookmarkPanel.Tag = 1) then
  begin
    BookmarkPanel.Visible := false;
  end else
  begin
    BookmarkPanel.Visible := false;
  end;
  Zoom;
end;

procedure TPDFViewForm.FormCreate(Sender: TObject);
var DeviceBehavior: IDeviceBehavior;
begin
  PixelsPerInch := 96;
  WheelStackDelta := 0;
  if TBehaviorServices.Current.SupportsBehaviorService(IDeviceBehavior, DeviceBehavior, Self) then
    PixelsPerInch := DeviceBehavior.GetDisplayMetrics(Self).PixelsPerInch;
  ScrollBox.AniCalculations.Animation := true;
  TreeView.AniCalculations.Animation := true;
end;

procedure TPDFViewForm.FormResize(Sender: TObject);
begin
  Zoom;
end;

procedure TPDFViewForm.FPdfViewMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState;
  X, Y: Single);
const
  Tolerance = 2.0;
var
  LinkIndex: Integer;
begin
  LinkIndex := FPdfView.WebLinkAtPos(Round(X), Round(Y));
  if LinkIndex <> -1 then
  begin
    OSExecute(FPdfView.WebLink[LinkIndex].Url);
    Exit;
  end;

  LinkIndex := FPdfView.LinkAnnotationAtPos(Round(X), Round(Y));
  if LinkIndex <> -1 then
  begin
    with FPdfView.LinkAnnotation[LinkIndex] do
      case Action of
        acGotoRemote, acLaunch, acUri:
          OSExecute(ActionPath);
        else
          if (PageNumber >= 1) and (PageNumber <= FPdfView.PageCount) then
            FPdfView.PageNumber := PageNumber;
      end;
    Exit;
  end;

  if ssDouble in Shift then
  begin
    // select current word
    SelectionStart := FPdfView.CharacterIndexAtPos(Round(X), Round(Y), Tolerance, Tolerance);
    SelectionEnd := SelectionStart;
    if SelectionStart >= 0 then
    begin
      while (SelectionStart > 0) and IsAlphaNumeric(FPdfView.Character[SelectionStart - 1]) do
        Dec(SelectionStart);

      while (SelectionEnd < FPdfView.CharacterCount - 1) and IsAlphaNumeric(FPdfView.Character[SelectionEnd + 1]) do
        Inc(SelectionEnd);

      FPdfView.Repaint;
    end;
  end
  else
  begin
    Selecting := True;
    SelectionStart := -1;
    SelectionEnd := -1;
  end;
end;

procedure TPDFViewForm.FPdfViewMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Single);
const
  Tolerance = 2.0;
var
  SelectedIndex: Integer;
  NeedRepaint: Boolean;
begin
  SelectedIndex := FPdfView.CharacterIndexAtPos(Round(X), Round(Y), Tolerance, Tolerance);
  if (not Selecting) and (FPdfView.WebLinkAtPos(Round(X), Round(Y)) <> -1) then
    FPdfView.Cursor := crHandPoint
  else if (not Selecting) and (FPdfView.LinkAnnotationAtPos(Round(X), Round(Y)) <> -1) then
    FPdfView.Cursor := crHandPoint
  else if SelectedIndex >= 0 then
    FPdfView.Cursor := crIBeam
  else
    FPdfView.Cursor := crDefault;

  if Selecting then
    if SelectedIndex >= 0 then
    begin
      NeedRepaint := False;

      if SelectionStart = -1 then
      begin
        SelectionStart := SelectedIndex;
        NeedRepaint := True;
      end;

      if SelectionEnd <> SelectedIndex then
      begin
        SelectionEnd := SelectedIndex;
        NeedRepaint := True;
      end;

      if NeedRepaint then
        FPdfView.Repaint;
    end;
end;

procedure TPDFViewForm.FPdfViewMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X,
  Y: Single);
var
  Text: string;
  Clipboard: IFMXClipboardService;
begin
  if Selecting then
  begin
    Selecting := False;
    if (SelectionStart >= 0) and (SelectionEnd >= 0) then
    begin
      if SelectionEnd < SelectionStart then
        Text := FPdfView.Text(SelectionEnd, SelectionStart - SelectionEnd + 1)
      else
        Text := FPdfView.Text(SelectionStart, SelectionEnd - SelectionStart + 1);

      if TPlatformServices.Current.SupportsPlatformService(IFMXClipboardService, IInterface(Clipboard)) then
        Clipboard.SetClipboard(Text);
    end;
  end;

end;

procedure TPDFViewForm.FPdfViewPageChange(Sender: TObject);
begin
  Selecting := False;
  SelectionStart := -1;
  SelectionEnd := -1;
  SearchStart := -1;
  SearchEnd := -1;

  PageEdit.Text := IntToStr(FPdfView.PageNumber);
  Zoom;
  FPdfView.Repaint;
end;

procedure TPDFViewForm.FPdfViewPaint(Sender: TObject; Canvas: TCanvas);
begin
if FPdfView.Enabled then
  begin
    FPdfView.PaintSelection(SelectionStart, SelectionEnd, TAlphaColor($8080C0F0));
    FPdfView.PaintSelection(SearchStart, SearchEnd, TAlphaColor($8000E000));
  end;
end;

procedure TPDFViewForm.FullSearchCloseClick(Sender: TObject);
begin
  SearchEdit.Text := FullSearchEdit.Text;
  SearchPanel.Visible := false;
  FPdfView.Margins.Top := 0;
  FPdfView.Repaint;
  SearchEdit.Visible := true;
end;

procedure TPDFViewForm.FullSearchNextButtonClick(Sender: TObject);
begin
  searchDocument(FullSearchEdit.Text, false);
end;

procedure TPDFViewForm.FullSearchPreviousButtonClick(Sender: TObject);
begin
  searchDocument(FullSearchEdit.Text, true);
end;

procedure TPDFViewForm.FullSearchStartButtonClick(Sender: TObject);
begin
  searchDocument(FullSearchEdit.Text, false);
end;

procedure TPDFViewForm.ImageFirstPageClick(Sender: TObject);
begin
	FPdfView.PageNumber := 1;
end;

procedure TPDFViewForm.ImageLastPageClick(Sender: TObject);
begin
	FPdfView.PageNumber := FPdfView.PageCount;
end;

procedure TPDFViewForm.ImageNextPageClick(Sender: TObject);
begin
  if FPdfView.PageNumber < FPdfView.PageCount then
  begin
    FPdfView.PageNumber := FPdfView.PageNumber + 1;
      PageLabel.Text := 'of ' + IntToStr(FPdfView.PageCount);
  end;

end;

procedure TPDFViewForm.ImagePreviousPageClick(Sender: TObject);
begin
	if FPdfView.PageNumber > 1 then
  begin
    FPdfView.PageNumber := FPdfView.PageNumber - 1;
  end;
end;

end.
